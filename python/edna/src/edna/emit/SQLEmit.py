from typing import Tuple, List
from edna.emit import BaseEmit
from edna.serializers import Serializable
from edna.core.factories import SQLTupleFactory

import warnings
mysql_import = None
try:
    import mysql.connector as mysql_import
except ImportError:
    warnings.warn("mysql-connector-python is not installed. edna.emit.SQLEmit might not work properly.", category=ImportWarning)


class SQLEmit(BaseEmit):
    """An Emitter that commits to a SQL Table."""
    emit_buffer : List[Tuple]
    def __init__(self, host: str, database: str, 
        user: str, password: str, table: str,
        tuple_factory: SQLTupleFactory,
        emit_buffer_batch_size: int = 10, emit_buffer_timeout_ms: int = 100, 
        serializer: Serializable = None, *args, **kwargs):
        """Connects to a MySQL Table and commits the incoming stream record-at-a-time

        """

        self.host = host
        self.database = database
        self.user = user
        self.password = password
        self.table = table
        self.conn = None
        self.query_base = None  # lazily created
        self.tuple_factory = tuple_factory
        # TODO possibly add a try catch block here?
        self.build_connection()
        super().__init__(serializer=serializer, emit_buffer_batch_size=emit_buffer_batch_size, emit_buffer_timeout_ms=emit_buffer_timeout_ms, *args, **kwargs)

    def write(self):
        """Inserts the `emit_buffer` into the provided table. `emit_buffer` must contain a list 
        of SQLTuples, generated by an `edna.process.map.ObjectToSQL`'s `SQLTupleFactory`. These 
        SQLTuples are dictionaries with two keys: "fields" and "values", corresponding to a
        tuple of table fields and table values for a SQL UPSERT statement."""
        self.build_statement()  # Builds self.query_base
        if not self.conn.is_connected():    # TODO Replace with a forced timeout?
            self.renew_connection()
        cursor = self.conn.cursor()
        cursor.executemany(self.query_base, self.emit_buffer[:self.emit_buffer_index+1])
        self.conn.commit()
        cursor.close()
        
    def build_statement(self):
        if self.query_base is None:
        # TODO protect againsnt inject
            #TODO Finish this
            fields = ",".join(self.tuple_factory.getFields())
            value_types = ",".join(["%s"]*self.tuple_factory.getFieldCount())
            self.query_base = "INSERT INTO {table} ({fields}) VALUES ({value_types}) ".format(table=self.table, fields = fields, value_types = value_types)

    def renew_connection(self):
        self.conn.shutdown()
        self.build_connection()

    def build_connection(self):
        """Connects to a mysql database given the configurations."""
        self.conn = mysql_import.connect(host=self.host, 
            database = self.database, 
            user=self.user, 
            password=self.password)




